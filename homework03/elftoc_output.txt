#include <stddef.h>
#include <elf.h>

#define ADDR_TEXT 0x00400000
#define ADDR_DATA 0x00600000

enum sections
{
  SHN_INTERP = 1, SHN_NOTE_ABI_TAG, SHN_NOTE_GNU_BUILD_ID, SHN_GNU_HASH,
  SHN_DYNSYM, SHN_DYNSTR, SHN_GNU_VERSION, SHN_GNU_VERSION_R, SHN_RELA_DYN,
  SHN_RELA_PLT, SHN_INIT, SHN_PLT, SHN_PLT_GOT, SHN_TEXT, SHN_FINI,
  SHN_RODATA, SHN_EH_FRAME_HDR, SHN_EH_FRAME, SHN_INIT_ARRAY, SHN_FINI_ARRAY,
  SHN_JCR, SHN_DYNAMIC, SHN_GOT, SHN_GOT_PLT, SHN_DATA, SHN_BSS, SHN_COMMENT,
  SHN_SHSTRTAB, SHN_SYMTAB, SHN_STRTAB, SHN_COUNT
};

typedef struct elf
{
  Elf64_Ehdr      ehdr;
  Elf64_Phdr      phdrs[9];
  unsigned char   interp[28];
  Elf64_Word      note_ABI_tag[8];
  Elf64_Word      note_gnu_build_id[9];
  Elf64_Word      gnu_hash[10];
  Elf64_Sym       dynsym[30];
  char            dynstr[233];
  unsigned char   pad1[1];
  Elf64_Half      gnu_version[30];
  unsigned char   pad2[2];
  Elf64_Word      gnu_version_r[12];
  Elf64_Rela      rela_dyn[3];
  Elf64_Rela      rela_plt[26];
  unsigned char   init[26];
  unsigned char   pad3[6];
  unsigned char   plt[432];
  unsigned char   plt_got[8];
  unsigned char   pad4[8];
  unsigned char   text[1746];
  unsigned char   pad5[2];
  unsigned char   fini[9];
  unsigned char   pad6[3];
  unsigned char   rodata[448];
  unsigned char   eh_frame_hdr[60];
  unsigned char   pad7[4];
  unsigned char   eh_frame[284];
  unsigned char   pad8[2196];
  Elf64_Addr      init_array[1];
  Elf64_Addr      fini_array[1];
  unsigned char   jcr[8];
  Elf64_Dyn       dynamic[29];
  Elf64_Addr      got[1];
  Elf64_Addr      got_plt[29];
  unsigned char   data[16];
  char            comment[52];
  unsigned char   pad9[4];
  Elf64_Sym       symtab[94];
  char            strtab[1001];
  char            shstrtab[268];
  unsigned char   pad10[3];
  Elf64_Shdr      shdrs[SHN_COUNT];
} elf;

elf foo =
{
  /* ehdr */
  {
    { 0x7F, 'E', 'L', 'F', ELFCLASS64, ELFDATA2LSB, EV_CURRENT, ELFOSABI_SYSV,
      0, 0, 0, 0, 0, 0, 0, 0 },
    ET_EXEC, EM_X86_64, EV_CURRENT, ADDR_TEXT + offsetof(elf, text),
    offsetof(elf, phdrs), offsetof(elf, shdrs), 0, sizeof(Elf64_Ehdr),
    sizeof(Elf64_Phdr), sizeof foo.phdrs / sizeof *foo.phdrs,
    sizeof(Elf64_Shdr), sizeof foo.shdrs / sizeof *foo.shdrs, SHN_SHSTRTAB
  },
  /* phdrs */
  {
    { PT_PHDR, PF_R | PF_X, offsetof(elf, phdrs),
      ADDR_TEXT + offsetof(elf, phdrs), ADDR_TEXT + offsetof(elf, phdrs),
      sizeof foo.phdrs, sizeof foo.phdrs, sizeof(Elf64_Addr) },
    { PT_INTERP, PF_R, offsetof(elf, interp),
      ADDR_TEXT + offsetof(elf, interp), ADDR_TEXT + offsetof(elf, interp),
      sizeof foo.interp, sizeof foo.interp, 1 },
    { PT_LOAD, PF_R | PF_X, 0, ADDR_TEXT, ADDR_TEXT, offsetof(elf, pad8),
      offsetof(elf, pad8), 0x200000 },
    { PT_LOAD, PF_R | PF_W, offsetof(elf, init_array),
      ADDR_DATA + offsetof(elf, init_array),
      ADDR_DATA + offsetof(elf, init_array),
      offsetof(elf, comment) - offsetof(elf, init_array),
      offsetof(elf, comment) - offsetof(elf, init_array) + 56, 0x200000 },
    { PT_DYNAMIC, PF_R | PF_W, offsetof(elf, dynamic),
      ADDR_DATA + offsetof(elf, dynamic), ADDR_DATA + offsetof(elf, dynamic),
      sizeof foo.dynamic, sizeof foo.dynamic, sizeof(Elf64_Addr) },
    { PT_NOTE, PF_R, offsetof(elf, note_ABI_tag),
      ADDR_TEXT + offsetof(elf, note_ABI_tag),
      ADDR_TEXT + offsetof(elf, note_ABI_tag),
      offsetof(elf, gnu_hash) - offsetof(elf, note_ABI_tag),
      offsetof(elf, gnu_hash) - offsetof(elf, note_ABI_tag),
      sizeof(Elf64_Word) },
    { PT_GNU_EH_FRAME, PF_R, offsetof(elf, eh_frame_hdr),
      ADDR_TEXT + offsetof(elf, eh_frame_hdr),
      ADDR_TEXT + offsetof(elf, eh_frame_hdr), sizeof foo.eh_frame_hdr,
      sizeof foo.eh_frame_hdr, 4 },
    { PT_GNU_STACK, PF_R | PF_W, 0, 0, 0, 0, 0, 0x10 },
    { PT_GNU_RELRO, PF_R, offsetof(elf, init_array),
      ADDR_DATA + offsetof(elf, init_array),
      ADDR_DATA + offsetof(elf, init_array),
      offsetof(elf, got_plt) - offsetof(elf, init_array),
      offsetof(elf, got_plt) - offsetof(elf, init_array), 1 }
  },
  /* interp */
  "/lib64/ld-linux-x86-64.so.2",
  /* note_ABI_tag */
  {
    4, 16, NT_GNU_ABI_TAG, 0x554E47, ELF_NOTE_OS_LINUX, 2, 6, 0x20
  },
  /* note_gnu_build_id */
  {
    4, 20, NT_GNU_BUILD_ID, 0x554E47, 0x9C2F1224, 0x1AC1C5FE, 0xCF38409F,
    0x06E94598, 0x329ECAB5
  },
  /* gnu_hash */
  {
    2, 28, 1, 6,
    0x00000100, 0x02100100,
    28, 29,
    0x1C8C1D29, 0x1C8BF239
  },
  /* dynsym */
  {
    { 0, 0, 0, SHN_UNDEF, 0, 0 },
    /* srandom */
    { 133, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* unlink */
    { 73, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* puts */
    { 51, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* qsort */
    { 152, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* write */
    { 127, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* strlen */
    { 87, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __stack_chk_fail */
    { 56, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* htons */
    { 30, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* printf */
    { 37, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* close */
    { 146, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __libc_start_main */
    { 178, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* strcmp */
    { 171, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __gmon_start__ */
    { 196, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* random */
    { 134, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* malloc */
    { 106, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* fflush */
    { 18, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* listen */
    { 80, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* bind */
    { 94, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* perror */
    { 44, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* bzero */
    { 113, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* accept */
    { 158, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* atoi */
    { 141, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* sprintf */
    { 36, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* exit */
    { 25, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* fwrite */
    { 126, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* sleep */
    { 165, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* socket */
    { 11, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* stdout */
    { 99, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 8, 8 },
    /* stderr */
    { 119, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 0x28, 8 }
  },
  /* dynstr */
  "\0libc.so.6\0socket\0fflush\0exit\0htons\0sprintf\0perror\0puts\0__stack_"
    "chk_fail\0unlink\0listen\0strlen\0bind\0stdout\0malloc\0bzero\0stderr\0"
    "fwrite\0srandom\0atoi\0close\0qsort\0accept\0sleep\0strcmp\0__libc_star"
    "t_main\0__gmon_start__\0GLIBC_2.4\0GLIBC_2.2.5",
  /* pad1 */
  { 0 },
  /* gnu_version */
  {
    0, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2
  },
  /* pad2 */
  { 0 },
  /* gnu_version_r */
  {
    0x00020001, 0x00000001, 0x00000010, 0x00000000, 0x0D696914, 0x00030000,
    0x000000D3, 0x00000010, 0x09691A75, 0x00020000, 0x000000DD, 0x00000000
  },
  /* rela_dyn */
  {
    /* __gmon_start__ */
    { ADDR_DATA + offsetof(elf, got), ELF64_R_INFO(13, R_X86_64_GLOB_DAT), 0 },
    /* stdout */
    { ADDR_DATA + offsetof(elf, comment) + 8, ELF64_R_INFO(28, R_X86_64_COPY),
      0 },
    /* stderr */
    { ADDR_DATA + offsetof(elf, comment) + 0x28,
      ELF64_R_INFO(29, R_X86_64_COPY), 0 }
  },
  /* rela_plt */
  {
    /* srandom */
    { ADDR_DATA + offsetof(elf, got_plt[3]),
      ELF64_R_INFO(1, R_X86_64_JUMP_SLOT), 0 },
    /* unlink */
    { ADDR_DATA + offsetof(elf, got_plt[4]),
      ELF64_R_INFO(2, R_X86_64_JUMP_SLOT), 0 },
    /* puts */
    { ADDR_DATA + offsetof(elf, got_plt[5]),
      ELF64_R_INFO(3, R_X86_64_JUMP_SLOT), 0 },
    /* qsort */
    { ADDR_DATA + offsetof(elf, got_plt[6]),
      ELF64_R_INFO(4, R_X86_64_JUMP_SLOT), 0 },
    /* write */
    { ADDR_DATA + offsetof(elf, got_plt[7]),
      ELF64_R_INFO(5, R_X86_64_JUMP_SLOT), 0 },
    /* strlen */
    { ADDR_DATA + offsetof(elf, got_plt[8]),
      ELF64_R_INFO(6, R_X86_64_JUMP_SLOT), 0 },
    /* __stack_chk_fail */
    { ADDR_DATA + offsetof(elf, got_plt[9]),
      ELF64_R_INFO(7, R_X86_64_JUMP_SLOT), 0 },
    /* htons */
    { ADDR_DATA + offsetof(elf, got_plt[10]),
      ELF64_R_INFO(8, R_X86_64_JUMP_SLOT), 0 },
    /* printf */
    { ADDR_DATA + offsetof(elf, got_plt[11]),
      ELF64_R_INFO(9, R_X86_64_JUMP_SLOT), 0 },
    /* close */
    { ADDR_DATA + offsetof(elf, got_plt[12]),
      ELF64_R_INFO(10, R_X86_64_JUMP_SLOT), 0 },
    /* __libc_start_main */
    { ADDR_DATA + offsetof(elf, got_plt[13]),
      ELF64_R_INFO(11, R_X86_64_JUMP_SLOT), 0 },
    /* strcmp */
    { ADDR_DATA + offsetof(elf, got_plt[14]),
      ELF64_R_INFO(12, R_X86_64_JUMP_SLOT), 0 },
    /* random */
    { ADDR_DATA + offsetof(elf, got_plt[15]),
      ELF64_R_INFO(14, R_X86_64_JUMP_SLOT), 0 },
    /* malloc */
    { ADDR_DATA + offsetof(elf, got_plt[16]),
      ELF64_R_INFO(15, R_X86_64_JUMP_SLOT), 0 },
    /* fflush */
    { ADDR_DATA + offsetof(elf, got_plt[17]),
      ELF64_R_INFO(16, R_X86_64_JUMP_SLOT), 0 },
    /* listen */
    { ADDR_DATA + offsetof(elf, got_plt[18]),
      ELF64_R_INFO(17, R_X86_64_JUMP_SLOT), 0 },
    /* bind */
    { ADDR_DATA + offsetof(elf, got_plt[19]),
      ELF64_R_INFO(18, R_X86_64_JUMP_SLOT), 0 },
    /* perror */
    { ADDR_DATA + offsetof(elf, got_plt[20]),
      ELF64_R_INFO(19, R_X86_64_JUMP_SLOT), 0 },
    /* bzero */
    { ADDR_DATA + offsetof(elf, got_plt[21]),
      ELF64_R_INFO(20, R_X86_64_JUMP_SLOT), 0 },
    /* accept */
    { ADDR_DATA + offsetof(elf, got_plt[22]),
      ELF64_R_INFO(21, R_X86_64_JUMP_SLOT), 0 },
    /* atoi */
    { ADDR_DATA + offsetof(elf, got_plt[23]),
      ELF64_R_INFO(22, R_X86_64_JUMP_SLOT), 0 },
    /* sprintf */
    { ADDR_DATA + offsetof(elf, got_plt[24]),
      ELF64_R_INFO(23, R_X86_64_JUMP_SLOT), 0 },
    /* exit */
    { ADDR_DATA + offsetof(elf, got_plt[25]),
      ELF64_R_INFO(24, R_X86_64_JUMP_SLOT), 0 },
    /* fwrite */
    { ADDR_DATA + offsetof(elf, got_plt[26]),
      ELF64_R_INFO(25, R_X86_64_JUMP_SLOT), 0 },
    /* sleep */
    { ADDR_DATA + offsetof(elf, got_plt[27]),
      ELF64_R_INFO(26, R_X86_64_JUMP_SLOT), 0 },
    /* socket */
    { ADDR_DATA + offsetof(elf, got_plt[28]),
      ELF64_R_INFO(27, R_X86_64_JUMP_SLOT), 0 }
  },
  /* init */
  {
    0x48, 0x83, 0xEC, 0x08, 0x48, 0x8B, 0x05, 0x4D, 0x16, 0x20, 0x00, 0x48,
    0x85, 0xC0, 0x74, 0x05, 0xE8, 0xBB, 0x01, 0x00, 0x00, 0x48, 0x83, 0xC4,
    0x08, 0xC3
  },
  /* pad3 */
  { 0 },
  /* plt */
  {
    0xFF, 0x35, 0x42, 0x16, 0x20, 0x00, 0xFF, 0x25, 0x44, 0x16, 0x20, 0x00,
    0x0F, 0x1F, 0x40, 0x00, 0xFF, 0x25, 0x42, 0x16, 0x20, 0x00, 0x68, 0x00,
    0x00, 0x00, 0x00, 0xE9, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x3A, 0x16,
    0x20, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xD0, 0xFF, 0xFF, 0xFF,
    0xFF, 0x25, 0x32, 0x16, 0x20, 0x00, 0x68, 0x02, 0x00, 0x00, 0x00, 0xE9,
    0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x2A, 0x16, 0x20, 0x00, 0x68, 0x03,
    0x00, 0x00, 0x00, 0xE9, 0xB0, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x22, 0x16,
    0x20, 0x00, 0x68, 0x04, 0x00, 0x00, 0x00, 0xE9, 0xA0, 0xFF, 0xFF, 0xFF,
    0xFF, 0x25, 0x1A, 0x16, 0x20, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0xE9,
    0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x12, 0x16, 0x20, 0x00, 0x68, 0x06,
    0x00, 0x00, 0x00, 0xE9, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x0A, 0x16,
    0x20, 0x00, 0x68, 0x07, 0x00, 0x00, 0x00, 0xE9, 0x70, 0xFF, 0xFF, 0xFF,
    0xFF, 0x25, 0x02, 0x16, 0x20, 0x00, 0x68, 0x08, 0x00, 0x00, 0x00, 0xE9,
    0x60, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0xFA, 0x15, 0x20, 0x00, 0x68, 0x09,
    0x00, 0x00, 0x00, 0xE9, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0xF2, 0x15,
    0x20, 0x00, 0x68, 0x0A, 0x00, 0x00, 0x00, 0xE9, 0x40, 0xFF, 0xFF, 0xFF,
    0xFF, 0x25, 0xEA, 0x15, 0x20, 0x00, 0x68, 0x0B, 0x00, 0x00, 0x00, 0xE9,
    0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0xE2, 0x15, 0x20, 0x00, 0x68, 0x0C,
    0x00, 0x00, 0x00, 0xE9, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0xDA, 0x15,
    0x20, 0x00, 0x68, 0x0D, 0x00, 0x00, 0x00, 0xE9, 0x10, 0xFF, 0xFF, 0xFF,
    0xFF, 0x25, 0xD2, 0x15, 0x20, 0x00, 0x68, 0x0E, 0x00, 0x00, 0x00, 0xE9,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0xCA, 0x15, 0x20, 0x00, 0x68, 0x0F,
    0x00, 0x00, 0x00, 0xE9, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0xC2, 0x15,
    0x20, 0x00, 0x68, 0x10, 0x00, 0x00, 0x00, 0xE9, 0xE0, 0xFE, 0xFF, 0xFF,
    0xFF, 0x25, 0xBA, 0x15, 0x20, 0x00, 0x68, 0x11, 0x00, 0x00, 0x00, 0xE9,
    0xD0, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0xB2, 0x15, 0x20, 0x00, 0x68, 0x12,
    0x00, 0x00, 0x00, 0xE9, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0xAA, 0x15,
    0x20, 0x00, 0x68, 0x13, 0x00, 0x00, 0x00, 0xE9, 0xB0, 0xFE, 0xFF, 0xFF,
    0xFF, 0x25, 0xA2, 0x15, 0x20, 0x00, 0x68, 0x14, 0x00, 0x00, 0x00, 0xE9,
    0xA0, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0x9A, 0x15, 0x20, 0x00, 0x68, 0x15,
    0x00, 0x00, 0x00, 0xE9, 0x90, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0x92, 0x15,
    0x20, 0x00, 0x68, 0x16, 0x00, 0x00, 0x00, 0xE9, 0x80, 0xFE, 0xFF, 0xFF,
    0xFF, 0x25, 0x8A, 0x15, 0x20, 0x00, 0x68, 0x17, 0x00, 0x00, 0x00, 0xE9,
    0x70, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0x82, 0x15, 0x20, 0x00, 0x68, 0x18,
    0x00, 0x00, 0x00, 0xE9, 0x60, 0xFE, 0xFF, 0xFF, 0xFF, 0x25, 0x7A, 0x15,
    0x20, 0x00, 0x68, 0x19, 0x00, 0x00, 0x00, 0xE9, 0x50, 0xFE, 0xFF, 0xFF
  },
  /* plt_got */
  {
    0xFF, 0x25, 0x82, 0x14, 0x20, 0x00, 0x66, 0x90
  },
  /* pad4 */
  { 0 },
  /* text */
  {
    0x31, 0xED, 0x49, 0x89, 0xD1, 0x5E, 0x48, 0x89, 0xE2, 0x48, 0x83, 0xE4,
    0xF0, 0x50, 0x54, 0x49, 0xC7, 0xC0, 0x50, 0x12, 0x40, 0x00, 0x48, 0xC7,
    0xC1, 0xE0, 0x11, 0x40, 0x00, 0x48, 0xC7, 0xC7, 0x94, 0x0C, 0x40, 0x00,
    0xE8, 0xC7, 0xFE, 0xFF, 0xFF, 0xF4, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
    0xB8, 0xFF, 0x20, 0x60, 0x00, 0x55, 0x48, 0x2D, 0xF8, 0x20, 0x60, 0x00,
    0x48, 0x83, 0xF8, 0x0E, 0x48, 0x89, 0xE5, 0x76, 0x1B, 0xB8, 0x00, 0x00,
    0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x11, 0x5D, 0xBF, 0xF8, 0x20, 0x60,
    0x00, 0xFF, 0xE0, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5D, 0xC3, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xBE, 0xF8, 0x20, 0x60, 0x00, 0x55, 0x48, 0x81,
    0xEE, 0xF8, 0x20, 0x60, 0x00, 0x48, 0xC1, 0xFE, 0x03, 0x48, 0x89, 0xE5,
    0x48, 0x89, 0xF0, 0x48, 0xC1, 0xE8, 0x3F, 0x48, 0x01, 0xC6, 0x48, 0xD1,
    0xFE, 0x74, 0x15, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74,
    0x0B, 0x5D, 0xBF, 0xF8, 0x20, 0x60, 0x00, 0xFF, 0xE0, 0x0F, 0x1F, 0x00,
    0x5D, 0xC3, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x80, 0x3D, 0xF1, 0x14,
    0x20, 0x00, 0x00, 0x75, 0x11, 0x55, 0x48, 0x89, 0xE5, 0xE8, 0x6E, 0xFF,
    0xFF, 0xFF, 0x5D, 0xC6, 0x05, 0xDE, 0x14, 0x20, 0x00, 0x01, 0xF3, 0xC3,
    0x0F, 0x1F, 0x40, 0x00, 0xBF, 0x20, 0x1E, 0x60, 0x00, 0x48, 0x83, 0x3F,
    0x00, 0x75, 0x05, 0xEB, 0x93, 0x0F, 0x1F, 0x00, 0xB8, 0x00, 0x00, 0x00,
    0x00, 0x48, 0x85, 0xC0, 0x74, 0xF1, 0x55, 0x48, 0x89, 0xE5, 0xFF, 0xD0,
    0x5D, 0xE9, 0x7A, 0xFF, 0xFF, 0xFF, 0x55, 0x48, 0x89, 0xE5, 0x48, 0x89,
    0x7D, 0xF8, 0x48, 0x89, 0x75, 0xF0, 0x48, 0x8B, 0x45, 0xF8, 0x8B, 0x10,
    0x48, 0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x29, 0xC2, 0x89, 0xD0, 0x5D, 0xC3,
    0x55, 0x48, 0x89, 0xE5, 0x53, 0x48, 0x81, 0xEC, 0x98, 0x00, 0x00, 0x00,
    0x89, 0xBD, 0x6C, 0xFF, 0xFF, 0xFF, 0x48, 0x89, 0xB5, 0x60, 0xFF, 0xFF,
    0xFF, 0x64, 0x48, 0x8B, 0x04, 0x25, 0x28, 0x00, 0x00, 0x00, 0x48, 0x89,
    0x45, 0xE8, 0x31, 0xC0, 0xC7, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x64, 0x00,
    0x00, 0x00, 0xC7, 0x85, 0x7C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0xC7, 0x45, 0x80, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0x84, 0x00, 0x00,
    0x00, 0x00, 0xC7, 0x45, 0x88, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x45,
    0xA0, 0x68, 0x12, 0x40, 0x00, 0xC7, 0x45, 0x8C, 0x01, 0x00, 0x00, 0x00,
    0xE9, 0xD8, 0x01, 0x00, 0x00, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48, 0x8D,
    0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF, 0xFF,
    0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0xBE, 0x90, 0x12, 0x40, 0x00,
    0x48, 0x89, 0xC7, 0xE8, 0x60, 0xFD, 0xFF, 0xFF, 0x85, 0xC0, 0x75, 0x14,
    0xBF, 0x98, 0x12, 0x40, 0x00, 0xE8, 0xC2, 0xFC, 0xFF, 0xFF, 0xBF, 0x00,
    0x00, 0x00, 0x00, 0xE8, 0xF8, 0xFD, 0xFF, 0xFF, 0x8B, 0x45, 0x8C, 0x48,
    0x98, 0x48, 0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85,
    0x60, 0xFF, 0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0xBE, 0x6B,
    0x13, 0x40, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x21, 0xFD, 0xFF, 0xFF, 0x85,
    0xC0, 0x75, 0x31, 0x83, 0x45, 0x8C, 0x01, 0x8B, 0x45, 0x8C, 0x48, 0x98,
    0x48, 0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60,
    0xFF, 0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0x48, 0x89, 0xC7,
    0xE8, 0x87, 0xFD, 0xFF, 0xFF, 0x89, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0xE9,
    0x39, 0x01, 0x00, 0x00, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48, 0x8D, 0x14,
    0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF, 0xFF, 0xFF,
    0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0xBE, 0x6E, 0x13, 0x40, 0x00, 0x48,
    0x89, 0xC7, 0xE8, 0xC5, 0xFC, 0xFF, 0xFF, 0x85, 0xC0, 0x75, 0x31, 0x83,
    0x45, 0x8C, 0x01, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48, 0x8D, 0x14, 0xC5,
    0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x48,
    0x01, 0xD0, 0x48, 0x8B, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x2B, 0xFD, 0xFF,
    0xFF, 0x89, 0x85, 0x7C, 0xFF, 0xFF, 0xFF, 0xE9, 0xDD, 0x00, 0x00, 0x00,
    0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48, 0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00,
    0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48,
    0x8B, 0x00, 0xBE, 0x71, 0x13, 0x40, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x69,
    0xFC, 0xFF, 0xFF, 0x85, 0xC0, 0x75, 0x0C, 0xC7, 0x45, 0x80, 0x01, 0x00,
    0x00, 0x00, 0xE9, 0xA6, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x8C, 0x48, 0x98,
    0x48, 0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60,
    0xFF, 0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0xBE, 0x74, 0x13,
    0x40, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x32, 0xFC, 0xFF, 0xFF, 0x85, 0xC0,
    0x75, 0x2B, 0x83, 0x45, 0x8C, 0x01, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48,
    0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF,
    0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0x48, 0x89, 0xC7, 0xE8,
    0x98, 0xFC, 0xFF, 0xFF, 0x89, 0x45, 0x88, 0xEB, 0x50, 0x8B, 0x45, 0x8C,
    0x48, 0x98, 0x48, 0x8D, 0x14, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B,
    0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x48, 0x01, 0xD0, 0x48, 0x8B, 0x00, 0xBE,
    0x77, 0x13, 0x40, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0xDC, 0xFB, 0xFF, 0xFF,
    0x85, 0xC0, 0x74, 0x25, 0x48, 0x8B, 0x05, 0x71, 0x12, 0x20, 0x00, 0x48,
    0x89, 0xC1, 0xBA, 0x10, 0x00, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x00, 0x00,
    0xBF, 0x81, 0x13, 0x40, 0x00, 0xE8, 0x7A, 0xFC, 0xFF, 0xFF, 0xC7, 0x45,
    0x84, 0x01, 0x00, 0x00, 0x00, 0x83, 0x45, 0x8C, 0x01, 0x8B, 0x45, 0x8C,
    0x3B, 0x85, 0x6C, 0xFF, 0xFF, 0xFF, 0x0F, 0x8C, 0x19, 0xFE, 0xFF, 0xFF,
    0x83, 0xBD, 0x6C, 0xFF, 0xFF, 0xFF, 0x01, 0x74, 0x0A, 0x83, 0x7D, 0x84,
    0x00, 0x0F, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0x60, 0xFF,
    0xFF, 0xFF, 0x48, 0x8B, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0xDB, 0xFA, 0xFF,
    0xFF, 0x89, 0x45, 0x9C, 0x83, 0x7D, 0x9C, 0x00, 0x75, 0x57, 0x48, 0x8B,
    0x05, 0x0B, 0x12, 0x20, 0x00, 0x48, 0x89, 0xC1, 0xBA, 0x20, 0x00, 0x00,
    0x00, 0xBE, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x98, 0x13, 0x40, 0x00, 0xE8,
    0x14, 0xFC, 0xFF, 0xFF, 0x48, 0x8B, 0x05, 0xCD, 0x11, 0x20, 0x00, 0x48,
    0x89, 0xC7, 0xE8, 0x75, 0xFB, 0xFF, 0xFF, 0xBF, 0x02, 0x00, 0x00, 0x00,
    0xE8, 0x0B, 0xFC, 0xFF, 0xFF, 0x48, 0x8B, 0x05, 0xD4, 0x11, 0x20, 0x00,
    0x48, 0x89, 0xC1, 0xBA, 0x06, 0x00, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x00,
    0x00, 0xBF, 0xB9, 0x13, 0x40, 0x00, 0xE8, 0xDD, 0xFB, 0xFF, 0xFF, 0xEB,
    0x0A, 0xBF, 0xC0, 0x13, 0x40, 0x00, 0xE8, 0x71, 0xFB, 0xFF, 0xFF, 0x8B,
    0x45, 0x9C, 0x89, 0xC7, 0xE8, 0xB7, 0xFB, 0xFF, 0xFF, 0x8B, 0x85, 0x78,
    0xFF, 0xFF, 0xFF, 0x48, 0x98, 0x48, 0xC1, 0xE0, 0x02, 0x48, 0x89, 0xC7,
    0xE8, 0x13, 0xFB, 0xFF, 0xFF, 0x48, 0x89, 0x45, 0xA8, 0x8B, 0x45, 0x88,
    0x89, 0xC7, 0xE8, 0x35, 0xFA, 0xFF, 0xFF, 0xC7, 0x45, 0x8C, 0x00, 0x00,
    0x00, 0x00, 0xEB, 0x20, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48, 0x8D, 0x14,
    0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x45, 0xA8, 0x48, 0x8D, 0x1C,
    0x02, 0xE8, 0xD2, 0xFA, 0xFF, 0xFF, 0x89, 0x03, 0x83, 0x45, 0x8C, 0x01,
    0x8B, 0x45, 0x8C, 0x3B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x7C, 0xD5, 0x83,
    0x7D, 0x80, 0x00, 0x74, 0x1F, 0x8B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x48,
    0x63, 0xF0, 0x48, 0x8B, 0x45, 0xA8, 0xB9, 0x76, 0x0C, 0x40, 0x00, 0xBA,
    0x04, 0x00, 0x00, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x0C, 0xFA, 0xFF, 0xFF,
    0x83, 0xBD, 0x7C, 0xFF, 0xFF, 0xFF, 0x00, 0x75, 0x44, 0xC7, 0x45, 0x8C,
    0x00, 0x00, 0x00, 0x00, 0xEB, 0x2B, 0x8B, 0x45, 0x8C, 0x48, 0x98, 0x48,
    0x8D, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x45, 0xA8, 0x48,
    0x01, 0xD0, 0x8B, 0x00, 0x89, 0xC6, 0xBF, 0xCE, 0x13, 0x40, 0x00, 0xB8,
    0x00, 0x00, 0x00, 0x00, 0xE8, 0x23, 0xFA, 0xFF, 0xFF, 0x83, 0x45, 0x8C,
    0x01, 0x8B, 0x45, 0x8C, 0x3B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x7C, 0xCA,
    0xE9, 0x74, 0x01, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x01,
    0x00, 0x00, 0x00, 0xBF, 0x02, 0x00, 0x00, 0x00, 0xE8, 0x0B, 0xFB, 0xFF,
    0xFF, 0x89, 0x45, 0x90, 0x83, 0x7D, 0x90, 0x00, 0x79, 0x14, 0xBF, 0xD2,
    0x13, 0x40, 0x00, 0xE8, 0x78, 0xFA, 0xFF, 0xFF, 0xBF, 0x01, 0x00, 0x00,
    0x00, 0xE8, 0xBE, 0xFA, 0xFF, 0xFF, 0x48, 0x8D, 0x45, 0xB0, 0xBE, 0x10,
    0x00, 0x00, 0x00, 0x48, 0x89, 0xC7, 0xE8, 0x6D, 0xFA, 0xFF, 0xFF, 0x66,
    0xC7, 0x45, 0xB0, 0x02, 0x00, 0xC7, 0x45, 0xB4, 0x00, 0x00, 0x00, 0x00,
    0x8B, 0x85, 0x7C, 0xFF, 0xFF, 0xFF, 0x0F, 0xB7, 0xC0, 0x89, 0xC7, 0xE8,
    0xA0, 0xF9, 0xFF, 0xFF, 0x66, 0x89, 0x45, 0xB2, 0x48, 0x8D, 0x4D, 0xB0,
    0x8B, 0x45, 0x90, 0xBA, 0x10, 0x00, 0x00, 0x00, 0x48, 0x89, 0xCE, 0x89,
    0xC7, 0xE8, 0x16, 0xFA, 0xFF, 0xFF, 0x85, 0xC0, 0x79, 0x14, 0xBF, 0xE7,
    0x13, 0x40, 0x00, 0xE8, 0x18, 0xFA, 0xFF, 0xFF, 0xBF, 0x01, 0x00, 0x00,
    0x00, 0xE8, 0x5E, 0xFA, 0xFF, 0xFF, 0x8B, 0x45, 0x90, 0xBE, 0x05, 0x00,
    0x00, 0x00, 0x89, 0xC7, 0xE8, 0xDF, 0xF9, 0xFF, 0xFF, 0xC7, 0x85, 0x74,
    0xFF, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x95, 0x74, 0xFF,
    0xFF, 0xFF, 0x48, 0x8D, 0x4D, 0xC0, 0x8B, 0x45, 0x90, 0x48, 0x89, 0xCE,
    0x89, 0xC7, 0xE8, 0xFD, 0xF9, 0xFF, 0xFF, 0x89, 0x45, 0x94, 0x83, 0x7D,
    0x94, 0x00, 0x79, 0x14, 0xBF, 0xF8, 0x13, 0x40, 0x00, 0xE8, 0xCA, 0xF9,
    0xFF, 0xFF, 0xBF, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x10, 0xFA, 0xFF, 0xFF,
    0xC7, 0x45, 0x8C, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x6D, 0x8B, 0x45, 0x8C,
    0x48, 0x98, 0x48, 0x8D, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B,
    0x45, 0xA8, 0x48, 0x01, 0xD0, 0x8B, 0x10, 0x48, 0x8D, 0x45, 0xD0, 0xBE,
    0xCE, 0x13, 0x40, 0x00, 0x48, 0x89, 0xC7, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0xE8, 0xCB, 0xF9, 0xFF, 0xFF, 0x48, 0x8D, 0x45, 0xD0, 0x48, 0x89, 0xC7,
    0xE8, 0xBF, 0xF8, 0xFF, 0xFF, 0x48, 0x89, 0xC2, 0x48, 0x8D, 0x4D, 0xD0,
    0x8B, 0x45, 0x94, 0x48, 0x89, 0xCE, 0x89, 0xC7, 0xE8, 0x9B, 0xF8, 0xFF,
    0xFF, 0x89, 0x45, 0x98, 0x83, 0x7D, 0x98, 0x00, 0x79, 0x14, 0xBF, 0x08,
    0x14, 0x40, 0x00, 0xE8, 0x58, 0xF9, 0xFF, 0xFF, 0xBF, 0x01, 0x00, 0x00,
    0x00, 0xE8, 0x9E, 0xF9, 0xFF, 0xFF, 0x83, 0x45, 0x8C, 0x01, 0x8B, 0x45,
    0x8C, 0x3B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x7C, 0x88, 0x8B, 0x45, 0x94,
    0x89, 0xC7, 0xE8, 0xB5, 0xF8, 0xFF, 0xFF, 0x8B, 0x45, 0x90, 0x89, 0xC7,
    0xE8, 0xAB, 0xF8, 0xFF, 0xFF, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B,
    0x5D, 0xE8, 0x64, 0x48, 0x33, 0x1C, 0x25, 0x28, 0x00, 0x00, 0x00, 0x74,
    0x05, 0xE8, 0x62, 0xF8, 0xFF, 0xFF, 0x48, 0x81, 0xC4, 0x98, 0x00, 0x00,
    0x00, 0x5B, 0x5D, 0xC3, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x41, 0x57, 0x41, 0x56, 0x41, 0x89, 0xFF, 0x41, 0x55, 0x41, 0x54, 0x4C,
    0x8D, 0x25, 0x1E, 0x0C, 0x20, 0x00, 0x55, 0x48, 0x8D, 0x2D, 0x1E, 0x0C,
    0x20, 0x00, 0x53, 0x49, 0x89, 0xF6, 0x49, 0x89, 0xD5, 0x4C, 0x29, 0xE5,
    0x48, 0x83, 0xEC, 0x08, 0x48, 0xC1, 0xFD, 0x03, 0xE8, 0x8F, 0xF7, 0xFF,
    0xFF, 0x48, 0x85, 0xED, 0x74, 0x20, 0x31, 0xDB, 0x0F, 0x1F, 0x84, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xEA, 0x4C, 0x89, 0xF6, 0x44, 0x89,
    0xFF, 0x41, 0xFF, 0x14, 0xDC, 0x48, 0x83, 0xC3, 0x01, 0x48, 0x39, 0xEB,
    0x75, 0xEA, 0x48, 0x83, 0xC4, 0x08, 0x5B, 0x5D, 0x41, 0x5C, 0x41, 0x5D,
    0x41, 0x5E, 0x41, 0x5F, 0xC3, 0x90, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xF3, 0xC3
  },
  /* pad5 */
  { 0 },
  /* fini */
  {
    0x48, 0x83, 0xEC, 0x08, 0x48, 0x83, 0xC4, 0x08, 0xC3
  },
  /* pad6 */
  { 0 },
  /* rodata */
  "\001\0\002\0\0\0\0\0You should inspect the symbol table...\n\0-h\0\0\0\0\0"
    "\0Usage: \n-h: show this help message\n-n <i>: allocate <i> items\n-p <"
    "port>: use port instead of default (10234) and send data out that port "
    "on TCP\n-s: sort\n-e <seed>: use <seed> to seed the random number gener"
    "ator\0-n\0-p\0-s\0-e\0--default\0Unknown option.\n\0\0\0\0\0\0\0I just "
    "deleted all your files...\0 not.\n\0unlink failed\0%d\n\0ERROR opening "
    "socket\0ERROR on binding\0ERROR on accept\0ERROR writing to socket",
  /* eh_frame_hdr */
  {
    0x01, 0x1B, 0x03, 0x3B, 0x3C, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0xA0, 0xF5, 0xFF, 0xFF, 0x88, 0x00, 0x00, 0x00, 0x60, 0xF7, 0xFF, 0xFF,
    0x58, 0x00, 0x00, 0x00, 0x56, 0xF8, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00,
    0x74, 0xF8, 0xFF, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0xC0, 0xFD, 0xFF, 0xFF,
    0xF8, 0x00, 0x00, 0x00, 0x30, 0xFE, 0xFF, 0xFF, 0x40, 0x01, 0x00, 0x00
  },
  /* pad7 */
  { 0 },
  /* eh_frame */
  {
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00,
    0x01, 0x78, 0x10, 0x01, 0x1B, 0x0C, 0x07, 0x08, 0x90, 0x01, 0x07, 0x10,
    0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xF7, 0xFF, 0xFF,
    0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00,
    0x01, 0x78, 0x10, 0x01, 0x1B, 0x0C, 0x07, 0x08, 0x90, 0x01, 0x00, 0x00,
    0x24, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x10, 0xF5, 0xFF, 0xFF,
    0xB0, 0x01, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x46, 0x0E, 0x18, 0x4A, 0x0F,
    0x0B, 0x77, 0x08, 0x80, 0x00, 0x3F, 0x1A, 0x3B, 0x2A, 0x33, 0x24, 0x22,
    0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
    0x9E, 0xF7, 0xFF, 0xFF, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x10,
    0x86, 0x02, 0x43, 0x0D, 0x06, 0x59, 0x0C, 0x07, 0x08, 0x00, 0x00, 0x00,
    0x24, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x9C, 0xF7, 0xFF, 0xFF,
    0x44, 0x05, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x10, 0x86, 0x02, 0x43, 0x0D,
    0x06, 0x48, 0x83, 0x03, 0x03, 0x37, 0x05, 0x0C, 0x07, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00,
    0xC0, 0xFC, 0xFF, 0xFF, 0x65, 0x00, 0x00, 0x00, 0x00, 0x42, 0x0E, 0x10,
    0x8F, 0x02, 0x42, 0x0E, 0x18, 0x8E, 0x03, 0x45, 0x0E, 0x20, 0x8D, 0x04,
    0x42, 0x0E, 0x28, 0x8C, 0x05, 0x48, 0x0E, 0x30, 0x86, 0x06, 0x48, 0x0E,
    0x38, 0x83, 0x07, 0x4D, 0x0E, 0x40, 0x72, 0x0E, 0x38, 0x41, 0x0E, 0x30,
    0x41, 0x0E, 0x28, 0x42, 0x0E, 0x20, 0x42, 0x0E, 0x18, 0x42, 0x0E, 0x10,
    0x42, 0x0E, 0x08, 0x00, 0x14, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00,
    0xE8, 0xFC, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  /* pad8 */
  { 0 },
  /* init_array */
  {
    ADDR_TEXT + offsetof(elf, text) + 0xD0
  },
  /* fini_array */
  {
    ADDR_TEXT + offsetof(elf, text) + 0xB0
  },
  /* jcr */
  { 0 },
  /* dynamic */
  {
    { DT_NEEDED, { 1 } }, /* libc.so.6 */
    { DT_INIT, { ADDR_TEXT + offsetof(elf, init) } },
    { DT_FINI, { ADDR_TEXT + offsetof(elf, fini) } },
    { DT_INIT_ARRAY, { ADDR_DATA + offsetof(elf, init_array) } },
    { DT_INIT_ARRAYSZ, { sizeof foo.init_array } },
    { DT_FINI_ARRAY, { ADDR_DATA + offsetof(elf, fini_array) } },
    { DT_FINI_ARRAYSZ, { sizeof foo.fini_array } },
    { DT_GNU_HASH, { ADDR_TEXT + offsetof(elf, gnu_hash) } },
    { DT_STRTAB, { ADDR_TEXT + offsetof(elf, dynstr) } },
    { DT_SYMTAB, { ADDR_TEXT + offsetof(elf, dynsym) } },
    { DT_STRSZ, { sizeof foo.dynstr } },
    { DT_ADDRNUM, { sizeof(Elf64_Sym) } },
    { DT_DEBUG, { 0 } },
    { DT_PLTGOT, { ADDR_DATA + offsetof(elf, got_plt) } },
    { DT_PLTRELSZ, { sizeof foo.rela_plt } },
    { DT_PLTREL, { DT_RELA } },
    { DT_JMPREL, { ADDR_TEXT + offsetof(elf, rela_plt) } },
    { DT_RELA, { ADDR_TEXT + offsetof(elf, rela_dyn) } },
    { DT_RELASZ, { sizeof foo.rela_dyn } },
    { DT_RELAENT, { sizeof(Elf64_Rela) } },
    { DT_VERNEED, { ADDR_TEXT + offsetof(elf, gnu_version_r) } },
    { DT_VERNEEDNUM, { 1 } },
    { DT_VERSYM, { ADDR_TEXT + offsetof(elf, gnu_version) } },
    { DT_NULL, { 0 } },
    { DT_NULL, { 0 } },
    { DT_NULL, { 0 } },
    { DT_NULL, { 0 } },
    { DT_NULL, { 0 } },
    { DT_NULL, { 0 } }
  },
  /* got */
  {
    0
  },
  /* got_plt */
  {
    ADDR_DATA + offsetof(elf, dynamic), 0, 0,
    ADDR_TEXT + offsetof(elf, plt) + 0x16,
    ADDR_TEXT + offsetof(elf, plt) + 0x26,
    ADDR_TEXT + offsetof(elf, plt) + 0x36,
    ADDR_TEXT + offsetof(elf, plt) + 0x46,
    ADDR_TEXT + offsetof(elf, plt) + 0x56,
    ADDR_TEXT + offsetof(elf, plt) + 0x66,
    ADDR_TEXT + offsetof(elf, plt) + 0x76,
    ADDR_TEXT + offsetof(elf, plt) + 0x86,
    ADDR_TEXT + offsetof(elf, plt) + 0x96,
    ADDR_TEXT + offsetof(elf, plt) + 0xA6,
    ADDR_TEXT + offsetof(elf, plt) + 0xB6,
    ADDR_TEXT + offsetof(elf, plt) + 0xC6,
    ADDR_TEXT + offsetof(elf, plt) + 0xD6,
    ADDR_TEXT + offsetof(elf, plt) + 0xE6,
    ADDR_TEXT + offsetof(elf, plt) + 0xF6,
    ADDR_TEXT + offsetof(elf, plt) + 0x0106,
    ADDR_TEXT + offsetof(elf, plt) + 0x0116,
    ADDR_TEXT + offsetof(elf, plt) + 0x0126,
    ADDR_TEXT + offsetof(elf, plt) + 0x0136,
    ADDR_TEXT + offsetof(elf, plt) + 0x0146,
    ADDR_TEXT + offsetof(elf, plt) + 0x0156,
    ADDR_TEXT + offsetof(elf, plt) + 0x0166,
    ADDR_TEXT + offsetof(elf, plt) + 0x0176,
    ADDR_TEXT + offsetof(elf, plt) + 0x0186,
    ADDR_TEXT + offsetof(elf, plt) + 0x0196,
    ADDR_TEXT + offsetof(elf, plt) + 0x01A6
  },
  /* data */
  { 0 },
  /* comment */
  "GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.6) 5.4.0 20160609",
  /* pad9 */
  { 0 },
  /* symtab */
  {
    { 0, 0, 0, SHN_UNDEF, 0, 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_INTERP,
      ADDR_TEXT + offsetof(elf, interp), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_NOTE_ABI_TAG,
      ADDR_TEXT + offsetof(elf, note_ABI_tag), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT,
      SHN_NOTE_GNU_BUILD_ID, ADDR_TEXT + offsetof(elf, note_gnu_build_id), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_GNU_HASH,
      ADDR_TEXT + offsetof(elf, gnu_hash), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_DYNSYM,
      ADDR_TEXT + offsetof(elf, dynsym), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_DYNSTR,
      ADDR_TEXT + offsetof(elf, dynstr), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_GNU_VERSION,
      ADDR_TEXT + offsetof(elf, gnu_version), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT,
      SHN_GNU_VERSION_R, ADDR_TEXT + offsetof(elf, gnu_version_r), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_RELA_DYN,
      ADDR_TEXT + offsetof(elf, rela_dyn), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_RELA_PLT,
      ADDR_TEXT + offsetof(elf, rela_plt), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_INIT,
      ADDR_TEXT + offsetof(elf, init), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_PLT,
      ADDR_TEXT + offsetof(elf, plt), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_PLT_GOT,
      ADDR_TEXT + offsetof(elf, plt_got), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_FINI,
      ADDR_TEXT + offsetof(elf, fini), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_RODATA,
      ADDR_TEXT + offsetof(elf, rodata), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_EH_FRAME_HDR,
      ADDR_TEXT + offsetof(elf, eh_frame_hdr), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_EH_FRAME,
      ADDR_TEXT + offsetof(elf, eh_frame), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_INIT_ARRAY,
      ADDR_DATA + offsetof(elf, init_array), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_FINI_ARRAY,
      ADDR_DATA + offsetof(elf, fini_array), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_JCR,
      ADDR_DATA + offsetof(elf, jcr), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_DYNAMIC,
      ADDR_DATA + offsetof(elf, dynamic), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_GOT,
      ADDR_DATA + offsetof(elf, got), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_GOT_PLT,
      ADDR_DATA + offsetof(elf, got_plt), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_DATA,
      ADDR_DATA + offsetof(elf, data), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 8, 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_SECTION), STV_DEFAULT, SHN_COMMENT, 0,
      0 },
    /* crtstuff.c */
    { 1, ELF64_ST_INFO(STB_LOCAL, STT_FILE), STV_DEFAULT, SHN_ABS, 0, 0 },
    /* __JCR_LIST__ */
    { 12, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_JCR,
      ADDR_DATA + offsetof(elf, jcr), 0 },
    /* deregister_tm_clones */
    { 25, ELF64_ST_INFO(STB_LOCAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0x30, 0 },
    /* register_tm_clones */
    { 27, ELF64_ST_INFO(STB_LOCAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0x70, 0 },
    /* __do_global_dtors_aux */
    { 46, ELF64_ST_INFO(STB_LOCAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0xB0, 0 },
    /* completed.7585 */
    { 68, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 0x30, 1 },
    /* __do_global_dtors_aux_fini_array_entry */
    { 83, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_FINI_ARRAY,
      ADDR_DATA + offsetof(elf, fini_array), 0 },
    /* frame_dummy */
    { 122, ELF64_ST_INFO(STB_LOCAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0xD0, 0 },
    /* __frame_dummy_init_array_entry */
    { 134, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_INIT_ARRAY,
      ADDR_DATA + offsetof(elf, init_array), 0 },
    /* mystery.c */
    { 165, ELF64_ST_INFO(STB_LOCAL, STT_FILE), STV_DEFAULT, SHN_ABS, 0, 0 },
    /* crtstuff.c */
    { 1, ELF64_ST_INFO(STB_LOCAL, STT_FILE), STV_DEFAULT, SHN_ABS, 0, 0 },
    /* __FRAME_END__ */
    { 175, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_EH_FRAME,
      ADDR_TEXT + offsetof(elf, eh_frame) + 0x0118, 0 },
    /* __JCR_END__ */
    { 189, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_JCR,
      ADDR_DATA + offsetof(elf, jcr), 0 },
    { 0, ELF64_ST_INFO(STB_LOCAL, STT_FILE), STV_DEFAULT, SHN_ABS, 0, 0 },
    /* __init_array_end */
    { 201, ELF64_ST_INFO(STB_LOCAL, STT_NOTYPE), STV_DEFAULT, SHN_INIT_ARRAY,
      ADDR_DATA + offsetof(elf, fini_array), 0 },
    /* _DYNAMIC */
    { 218, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_DYNAMIC,
      ADDR_DATA + offsetof(elf, dynamic), 0 },
    /* __init_array_start */
    { 227, ELF64_ST_INFO(STB_LOCAL, STT_NOTYPE), STV_DEFAULT, SHN_INIT_ARRAY,
      ADDR_DATA + offsetof(elf, init_array), 0 },
    /* __GNU_EH_FRAME_HDR */
    { 246, ELF64_ST_INFO(STB_LOCAL, STT_NOTYPE), STV_DEFAULT,
      SHN_EH_FRAME_HDR, ADDR_TEXT + offsetof(elf, eh_frame_hdr), 0 },
    /* _GLOBAL_OFFSET_TABLE_ */
    { 265, ELF64_ST_INFO(STB_LOCAL, STT_OBJECT), STV_DEFAULT, SHN_GOT_PLT,
      ADDR_DATA + offsetof(elf, got_plt), 0 },
    /* __libc_csu_fini */
    { 287, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0x06D0, 2 },
    /* srandom@@GLIBC_2.2.5 */
    { 303, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* unlink@@GLIBC_2.2.5 */
    { 324, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* _ITM_deregisterTMCloneTable */
    { 344, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* stdout@@GLIBC_2.2.5 */
    { 372, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 8, 8 },
    /* data_start */
    { 555, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_DATA,
      ADDR_DATA + offsetof(elf, data), 0 },
    /* puts@@GLIBC_2.2.5 */
    { 392, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* qsort@@GLIBC_2.2.5 */
    { 410, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* write@@GLIBC_2.2.5 */
    { 885, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* _edata */
    { 429, ELF64_ST_INFO(STB_GLOBAL, STT_NOTYPE), STV_DEFAULT, SHN_DATA,
      ADDR_DATA + offsetof(elf, comment), 0 },
    /* _fini */
    { 297, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_FINI,
      ADDR_TEXT + offsetof(elf, fini), 0 },
    /* strlen@@GLIBC_2.2.5 */
    { 436, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __stack_chk_fail@@GLIBC_2.4 */
    { 456, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* htons@@GLIBC_2.2.5 */
    { 484, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* printf@@GLIBC_2.2.5 */
    { 846, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* close@@GLIBC_2.2.5 */
    { 503, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __libc_start_main@@GLIBC_2.2.5 */
    { 522, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __data_start */
    { 553, ELF64_ST_INFO(STB_GLOBAL, STT_NOTYPE), STV_DEFAULT, SHN_DATA,
      ADDR_DATA + offsetof(elf, data), 0 },
    /* strcmp@@GLIBC_2.2.5 */
    { 566, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __gmon_start__ */
    { 586, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __dso_handle */
    { 601, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_HIDDEN, SHN_DATA,
      ADDR_DATA + offsetof(elf, data) + 8, 0 },
    /* _IO_stdin_used */
    { 614, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_DEFAULT, SHN_RODATA,
      ADDR_TEXT + offsetof(elf, rodata), 4 },
    /* random@@GLIBC_2.2.5 */
    { 304, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __libc_csu_init */
    { 629, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0x0660, 101 },
    /* malloc@@GLIBC_2.2.5 */
    { 645, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* fflush@@GLIBC_2.2.5 */
    { 665, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* listen@@GLIBC_2.2.5 */
    { 685, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* _end */
    { 213, ELF64_ST_INFO(STB_GLOBAL, STT_NOTYPE), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, symtab), 0 },
    /* _start */
    { 559, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text), 42 },
    /* cmpfunc */
    { 705, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0xF6, 30 },
    /* __bss_start */
    { 713, ELF64_ST_INFO(STB_GLOBAL, STT_NOTYPE), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment), 0 },
    /* main */
    { 725, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_TEXT,
      ADDR_TEXT + offsetof(elf, text) + 0x0114, 1348 },
    /* bind@@GLIBC_2.2.5 */
    { 730, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* perror@@GLIBC_2.2.5 */
    { 748, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* bzero@@GLIBC_2.2.5 */
    { 768, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* _Jv_RegisterClasses */
    { 787, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* accept@@GLIBC_2.2.5 */
    { 807, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* atoi@@GLIBC_2.2.5 */
    { 827, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* sprintf@@GLIBC_2.2.5 */
    { 845, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* exit@@GLIBC_2.2.5 */
    { 866, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* fwrite@@GLIBC_2.2.5 */
    { 884, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* __TMC_END__ */
    { 904, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_HIDDEN, SHN_DATA,
      ADDR_DATA + offsetof(elf, comment), 0 },
    /* _ITM_registerTMCloneTable */
    { 916, ELF64_ST_INFO(STB_WEAK, STT_NOTYPE), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* sleep@@GLIBC_2.2.5 */
    { 942, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 },
    /* _init */
    { 639, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_INIT,
      ADDR_TEXT + offsetof(elf, init), 0 },
    /* stderr@@GLIBC_2.2.5 */
    { 961, ELF64_ST_INFO(STB_GLOBAL, STT_OBJECT), STV_DEFAULT, SHN_BSS,
      ADDR_DATA + offsetof(elf, comment) + 0x28, 8 },
    /* socket@@GLIBC_2.2.5 */
    { 981, ELF64_ST_INFO(STB_GLOBAL, STT_FUNC), STV_DEFAULT, SHN_UNDEF, 0, 0 }
  },
  /* strtab */
  "\0crtstuff.c\0__JCR_LIST__\0deregister_tm_clones\0__do_global_dtors_aux\0"
    "completed.7585\0__do_global_dtors_aux_fini_array_entry\0frame_dummy\0__"
    "frame_dummy_init_array_entry\0mystery.c\0__FRAME_END__\0__JCR_END__\0__"
    "init_array_end\0_DYNAMIC\0__init_array_start\0__GNU_EH_FRAME_HDR\0_GLOB"
    "AL_OFFSET_TABLE_\0__libc_csu_fini\0srandom@@GLIBC_2.2.5\0unlink@@GLIBC_"
    "2.2.5\0_ITM_deregisterTMCloneTable\0stdout@@GLIBC_2.2.5\0puts@@GLIBC_2."
    "2.5\0qsort@@GLIBC_2.2.5\0_edata\0strlen@@GLIBC_2.2.5\0__stack_chk_fail@"
    "@GLIBC_2.4\0htons@@GLIBC_2.2.5\0close@@GLIBC_2.2.5\0__libc_start_main@@"
    "GLIBC_2.2.5\0__data_start\0strcmp@@GLIBC_2.2.5\0__gmon_start__\0__dso_h"
    "andle\0_IO_stdin_used\0__libc_csu_init\0malloc@@GLIBC_2.2.5\0fflush@@GL"
    "IBC_2.2.5\0listen@@GLIBC_2.2.5\0cmpfunc\0__bss_start\0main\0bind@@GLIBC"
    "_2.2.5\0perror@@GLIBC_2.2.5\0bzero@@GLIBC_2.2.5\0_Jv_RegisterClasses\0a"
    "ccept@@GLIBC_2.2.5\0atoi@@GLIBC_2.2.5\0sprintf@@GLIBC_2.2.5\0exit@@GLIB"
    "C_2.2.5\0fwrite@@GLIBC_2.2.5\0__TMC_END__\0_ITM_registerTMCloneTable\0s"
    "leep@@GLIBC_2.2.5\0stderr@@GLIBC_2.2.5\0socket@@GLIBC_2.2.5",
  /* shstrtab */
  "\0.symtab\0.strtab\0.shstrtab\0.interp\0.note.ABI-tag\0.note.gnu.build-id"
    "\0.gnu.hash\0.dynsym\0.dynstr\0.gnu.version\0.gnu.version_r\0.rela.dyn\0"
    ".rela.plt\0.init\0.plt.got\0.text\0.fini\0.rodata\0.eh_frame_hdr\0.eh_f"
    "rame\0.init_array\0.fini_array\0.jcr\0.dynamic\0.got.plt\0.data\0.bss\0"
    ".comment",
  /* pad10 */
  { 0 },
  /* shdrs */
  {
    { 0, SHT_NULL, 0, 0, 0, 0, SHN_UNDEF, 0, 0, 0 },
    /* .interp */
    { 27, SHT_PROGBITS, SHF_ALLOC, ADDR_TEXT + offsetof(elf, interp),
      offsetof(elf, interp), sizeof foo.interp, SHN_UNDEF, 0, 1, 0 },
    /* .note.ABI-tag */
    { 35, SHT_NOTE, SHF_ALLOC, ADDR_TEXT + offsetof(elf, note_ABI_tag),
      offsetof(elf, note_ABI_tag), sizeof foo.note_ABI_tag, SHN_UNDEF, 0,
      sizeof(Elf64_Word), 0 },
    /* .note.gnu.build-id */
    { 49, SHT_NOTE, SHF_ALLOC, ADDR_TEXT + offsetof(elf, note_gnu_build_id),
      offsetof(elf, note_gnu_build_id), sizeof foo.note_gnu_build_id,
      SHN_UNDEF, 0, sizeof(Elf64_Word), 0 },
    /* .gnu.hash */
    { 68, SHT_GNU_HASH, SHF_ALLOC, ADDR_TEXT + offsetof(elf, gnu_hash),
      offsetof(elf, gnu_hash), sizeof foo.gnu_hash, SHN_DYNSYM, 0,
      sizeof(Elf64_Addr), 0 },
    /* .dynsym */
    { 78, SHT_DYNSYM, SHF_ALLOC, ADDR_TEXT + offsetof(elf, dynsym),
      offsetof(elf, dynsym), sizeof foo.dynsym, SHN_DYNSTR, 1,
      sizeof(Elf64_Addr), sizeof(Elf64_Sym) },
    /* .dynstr */
    { 86, SHT_STRTAB, SHF_ALLOC, ADDR_TEXT + offsetof(elf, dynstr),
      offsetof(elf, dynstr), sizeof foo.dynstr, SHN_UNDEF, 0, 1, 0 },
    /* .gnu.version */
    { 94, SHT_HIOS, SHF_ALLOC, ADDR_TEXT + offsetof(elf, gnu_version),
      offsetof(elf, gnu_version), sizeof foo.gnu_version, SHN_DYNSYM, 0,
      sizeof(Elf64_Half), sizeof(Elf64_Half) },
    /* .gnu.version_r */
    { 107, SHT_GNU_verneed, SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, gnu_version_r), offsetof(elf, gnu_version_r),
      sizeof foo.gnu_version_r, SHN_DYNSTR, 1, sizeof(Elf64_Addr), 0 },
    /* .rela.dyn */
    { 122, SHT_RELA, SHF_ALLOC, ADDR_TEXT + offsetof(elf, rela_dyn),
      offsetof(elf, rela_dyn), sizeof foo.rela_dyn, SHN_DYNSYM, SHN_UNDEF,
      sizeof(Elf64_Addr), sizeof(Elf64_Rela) },
    /* .rela.plt */
    { 132, SHT_RELA, SHF_ALLOC | SHF_INFO_LINK,
      ADDR_TEXT + offsetof(elf, rela_plt), offsetof(elf, rela_plt),
      sizeof foo.rela_plt, SHN_DYNSYM, SHN_GOT_PLT, sizeof(Elf64_Addr),
      sizeof(Elf64_Rela) },
    /* .init */
    { 142, SHT_PROGBITS, SHF_EXECINSTR | SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, init), offsetof(elf, init), sizeof foo.init,
      SHN_UNDEF, 0, 4, 0 },
    /* .plt */
    { 137, SHT_PROGBITS, SHF_EXECINSTR | SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, plt), offsetof(elf, plt), sizeof foo.plt,
      SHN_UNDEF, 0, 0x10, 0x10 },
    /* .plt.got */
    { 148, SHT_PROGBITS, SHF_EXECINSTR | SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, plt_got), offsetof(elf, plt_got),
      sizeof foo.plt_got, SHN_UNDEF, 0, sizeof(Elf64_Addr), 0 },
    /* .text */
    { 157, SHT_PROGBITS, SHF_EXECINSTR | SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, text), offsetof(elf, text), sizeof foo.text,
      SHN_UNDEF, 0, 0x10, 0 },
    /* .fini */
    { 163, SHT_PROGBITS, SHF_EXECINSTR | SHF_ALLOC,
      ADDR_TEXT + offsetof(elf, fini), offsetof(elf, fini), sizeof foo.fini,
      SHN_UNDEF, 0, 4, 0 },
    /* .rodata */
    { 169, SHT_PROGBITS, SHF_ALLOC, ADDR_TEXT + offsetof(elf, rodata),
      offsetof(elf, rodata), sizeof foo.rodata, SHN_UNDEF, 0,
      sizeof(Elf64_Addr), 0 },
    /* .eh_frame_hdr */
    { 177, SHT_PROGBITS, SHF_ALLOC, ADDR_TEXT + offsetof(elf, eh_frame_hdr),
      offsetof(elf, eh_frame_hdr), sizeof foo.eh_frame_hdr, SHN_UNDEF, 0, 4,
      0 },
    /* .eh_frame */
    { 191, SHT_PROGBITS, SHF_ALLOC, ADDR_TEXT + offsetof(elf, eh_frame),
      offsetof(elf, eh_frame), sizeof foo.eh_frame, SHN_UNDEF, 0,
      sizeof(Elf64_Addr), 0 },
    /* .init_array */
    { 201, SHT_INIT_ARRAY, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, init_array), offsetof(elf, init_array),
      sizeof foo.init_array, SHN_UNDEF, 0, sizeof(Elf64_Addr), 0 },
    /* .fini_array */
    { 213, SHT_FINI_ARRAY, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, fini_array), offsetof(elf, fini_array),
      sizeof foo.fini_array, SHN_UNDEF, 0, sizeof(Elf64_Addr), 0 },
    /* .jcr */
    { 225, SHT_PROGBITS, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, jcr), offsetof(elf, jcr), sizeof foo.jcr,
      SHN_UNDEF, 0, sizeof(Elf64_Addr), 0 },
    /* .dynamic */
    { 230, SHT_DYNAMIC, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, dynamic), offsetof(elf, dynamic),
      sizeof foo.dynamic, SHN_DYNSTR, 0, sizeof(Elf64_Addr),
      sizeof(Elf64_Dyn) },
    /* .got */
    { 152, SHT_PROGBITS, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, got), offsetof(elf, got), sizeof foo.got,
      SHN_UNDEF, 0, sizeof(Elf64_Addr), sizeof(Elf64_Addr) },
    /* .got.plt */
    { 239, SHT_PROGBITS, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, got_plt), offsetof(elf, got_plt),
      sizeof foo.got_plt, SHN_UNDEF, 0, sizeof(Elf64_Addr),
      sizeof(Elf64_Addr) },
    /* .data */
    { 248, SHT_PROGBITS, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, data), offsetof(elf, data), sizeof foo.data,
      SHN_UNDEF, 0, sizeof(Elf64_Addr), 0 },
    /* .bss */
    { 254, SHT_NOBITS, SHF_WRITE | SHF_ALLOC,
      ADDR_DATA + offsetof(elf, comment) + 8, offsetof(elf, comment),
      sizeof foo.comment - 4, SHN_UNDEF, 0, 0x20, 0 },
    /* .comment */
    { 259, SHT_PROGBITS, SHF_STRINGS | SHF_MERGE, 0, offsetof(elf, comment),
      sizeof foo.comment, SHN_UNDEF, 0, 1, 1 },
    /* .shstrtab */
    { 17, SHT_STRTAB, 0, 0, offsetof(elf, shstrtab), sizeof foo.shstrtab,
      SHN_UNDEF, 0, 1, 0 },
    /* .symtab */
    { 1, SHT_SYMTAB, 0, 0, offsetof(elf, symtab), sizeof foo.symtab,
      SHN_STRTAB, 47, sizeof(Elf64_Addr), sizeof(Elf64_Sym) },
    /* .strtab */
    { 9, SHT_STRTAB, 0, 0, offsetof(elf, strtab), sizeof foo.strtab,
      SHN_UNDEF, 0, 1, 0 }
  }
};
